from __future__ import annotations

from pathlib import Path
from typing import TYPE_CHECKING

import pytest

from configgen.batoceraPaths import CONFIGS, ROMS
from configgen.config import SystemConfig
from configgen.generators.gzdoom.gzdoomGenerator import GZDoomGenerator
from tests.generators.base import GeneratorBaseTest
from tests.mock_controllers import make_player_controller_list

if TYPE_CHECKING:
    from _pytest.fixtures import SubRequest
    from pyfakefs.fake_filesystem import FakeFilesystem
    from syrupy.assertion import SnapshotAssertion

    from configgen.controller import Controller
    from configgen.Emulator import Emulator


@pytest.mark.usefixtures('fs')
class TestGZDoomGenerator(GeneratorBaseTest):
    @pytest.fixture
    def generator_cls(self) -> type[GZDoomGenerator]:
        return GZDoomGenerator

    @pytest.fixture
    def system_name(self) -> str:
        return 'gzdoom'

    @pytest.fixture
    def emulator(self) -> str:
        return 'gzdoom'

    @pytest.fixture
    def arch(self, request: SubRequest) -> str:
        return getattr(request, 'param', None) or 'x86_64'

    @pytest.fixture(autouse=True)
    def fs(self, fs: FakeFilesystem, arch: str) -> FakeFilesystem:
        fs.create_file('/usr/share/batocera/batocera.arch', contents=f'{arch}\n')
        return fs

    def test_get_in_game_ratio(self, generator: GZDoomGenerator) -> None:  # pyright: ignore
        assert generator.getInGameRatio(SystemConfig({}), {'width': 0, 'height': 0}, Path()) == 16 / 9

    def test_generate(self, generator: GZDoomGenerator, mock_system: Emulator, snapshot: SnapshotAssertion) -> None:
        assert (
            generator.generate(
                mock_system,
                ROMS / 'gzdoom' / 'romdir' / 'rom.wad',
                [],
                {},
                [],
                {},
                {'width': 1920, 'height': 1080},
            )
            == snapshot
        )
        assert (CONFIGS / 'gzdoom' / 'gzdoom.ini').read_text() == snapshot(name='config')
        assert (CONFIGS / 'gzdoom' / 'gzdoom.cfg').read_text() == snapshot(name='script')
        assert (CONFIGS / 'gzdoom' / 'fm_banks').is_dir()
        assert (CONFIGS / 'gzdoom' / 'soundfonts').is_dir()

    def test_generate_existing(
        self, generator: GZDoomGenerator, fs: FakeFilesystem, mock_system: Emulator, snapshot: SnapshotAssertion
    ) -> None:
        fs.create_file(
            CONFIGS / 'gzdoom' / 'gzdoom.ini',
            contents="""[IWADSearch.Directories]
Path=/some/path
[FileSearch.Directories]
Path=/some/other/path
[SoundfontSearch.Directories]
Path=/another/path
Path=/yet/another/path
[GlobalSettings]
use_joystick=true
""",
        )
        fs.create_file(
            CONFIGS / 'gzdoom' / 'gzdoom.cfg',
            contents="""[IWADSearch.Directories]
# This file is automatically generated by gzdoomGenerator.py
logfile /somewhere/over/the/rainbow
echo BATOCERA
""",
        )

        generator.generate(
            mock_system,
            ROMS / 'gzdoom' / 'romdir' / 'rom.wad',
            [],
            {},
            [],
            {},
            {'width': 1920, 'height': 1080},
        )
        assert (CONFIGS / 'gzdoom' / 'gzdoom.ini').read_text() == snapshot(name='config')
        assert (CONFIGS / 'gzdoom' / 'gzdoom.cfg').read_text() == snapshot(name='script')

    def test_generate_existing_no_global_settings(
        self, generator: GZDoomGenerator, fs: FakeFilesystem, mock_system: Emulator, snapshot: SnapshotAssertion
    ) -> None:
        fs.create_file(
            CONFIGS / 'gzdoom' / 'gzdoom.ini',
            contents="""[IWADSearch.Directories]
Path=/some/path
[FileSearch.Directories]
Path=/some/other/path
[SoundfontSearch.Directories]
Path=/another/path
Path=/yet/another/path
""",
        )

        generator.generate(
            mock_system,
            ROMS / 'gzdoom' / 'romdir' / 'rom.wad',
            [],
            {},
            [],
            {},
            {'width': 1920, 'height': 1080},
        )
        assert (CONFIGS / 'gzdoom' / 'gzdoom.ini').read_text() == snapshot

    @pytest.mark.parametrize(
        'mock_system_config',
        [
            {'gz_api': '0'},
            {'gz_api': '1'},
            {'gz_vsync': 'False'},
            {'gz_vsync': 'True'},
            {'nologo': '1'},
            {'nologo': '0'},
        ],
        ids=str,
    )
    @pytest.mark.parametrize('arch', ['x86_64', 'arm64'])
    def test_generate_config(
        self, generator: GZDoomGenerator, mock_system: Emulator, snapshot: SnapshotAssertion
    ) -> None:
        assert (
            generator.generate(
                mock_system,
                ROMS / 'gzdoom' / 'romdir' / 'rom.wad',
                [],
                {},
                [],
                {},
                {'width': 1920, 'height': 1080},
            )
            == snapshot
        )
        assert (CONFIGS / 'gzdoom' / 'gzdoom.ini').read_text() == snapshot(name='config')
        assert (CONFIGS / 'gzdoom' / 'gzdoom.cfg').read_text() == snapshot(name='script')

    def test_generate_rom_gzdoom(
        self, generator: GZDoomGenerator, fs: FakeFilesystem, mock_system: Emulator, snapshot: SnapshotAssertion
    ) -> None:
        fs.create_file(
            '/userdata/roms/gzdoom/romdir/rom.gzdoom',
            contents='-iwad DOOM2.WAD -file ALIENS_ERADICATION_TC_2_0.pk3 ERADICATION_MAPSET_2_0.wad',
        )

        assert (
            generator.generate(
                mock_system,
                ROMS / 'gzdoom' / 'romdir' / 'rom.gzdoom',
                [],
                {},
                [],
                {},
                {'width': 1920, 'height': 1080},
            )
            == snapshot
        )
        assert (CONFIGS / 'gzdoom' / 'gzdoom.ini').read_text() == snapshot(name='config')

    def test_generate_controllers(
        self,
        generator: GZDoomGenerator,
        mock_system: Emulator,
        generic_xbox_pad: Controller,
        snapshot: SnapshotAssertion,
    ) -> None:
        assert (
            generator.generate(
                mock_system,
                ROMS / 'gzdoom' / 'romdir' / 'rom.wad',
                make_player_controller_list(generic_xbox_pad, generic_xbox_pad),
                {},
                [],
                {},
                {'width': 1920, 'height': 1080},
            )
            == snapshot
        )
        assert (CONFIGS / 'gzdoom' / 'gzdoom.ini').read_text() == snapshot(name='config')
        assert (CONFIGS / 'gzdoom' / 'gzdoom.cfg').read_text() == snapshot(name='script')
        assert (CONFIGS / 'gzdoom' / 'fm_banks').is_dir()
        assert (CONFIGS / 'gzdoom' / 'soundfonts').is_dir()
